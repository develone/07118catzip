!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BASECLASS	automaster_tb.cpp	58;"	d	file:
BASECLASS	main_tb.cpp	48;"	d	file:
BUSW	memsim.h	/^	typedef	unsigned int	BUSW;$/;"	t	class:MEMSIM
BYTESWAP_H	byteswap.h	43;"	d
DBLPIPEBUFLEN	pportsim.cpp	59;"	d	file:
ELFSECTION	zipelf.h	/^class	ELFSECTION {$/;"	c
FPGAHOST	port.h	43;"	d
FPGAOPEN	port.h	46;"	d
FPGAPORT	port.h	44;"	d
MAINTB	main_tb.cpp	/^	MAINTB(void) {$/;"	f	class:MAINTB
MAINTB	main_tb.cpp	/^class	MAINTB : public TESTB<Vmain> {$/;"	c	file:
MEMSIM	memsim.cpp	/^MEMSIM::MEMSIM(const unsigned int nwords, const unsigned int delay) {$/;"	f	class:MEMSIM
MEMSIM	memsim.h	/^class	MEMSIM {$/;"	c
MEMSIM_H	memsim.h	47;"	d
PORT_H	port.h	41;"	d
PPORTSIM	pportsim.cpp	/^PPORTSIM::PPORTSIM(const int port, const bool copy_to_stdout)$/;"	f	class:PPORTSIM
PPORTSIM	pportsim.h	/^class	PPORTSIM {$/;"	c
PPORTSIMBUFLEN	pportsim.h	86;"	d
PPORTSIM_H	pportsim.h	67;"	d
PP_FROM_FPGA	pportsim.cpp	57;"	d	file:
PP_TO_FPGA	pportsim.cpp	56;"	d	file:
TESTB	testb.h	/^	TESTB(void) {$/;"	f	class:TESTB
TESTB	testb.h	/^template <class VA>	class TESTB {$/;"	c
TESTB_H	testb.h	43;"	d
ZIPELF_H	zipelf.h	39;"	d
apply	memsim.cpp	/^void	MEMSIM::apply(const uchar wb_cyc, const uchar wb_stb, const uchar wb_we,$/;"	f	class:MEMSIM
block_ram	main_tb.cpp	82;"	d	file:
buildswap	byteswap.cpp	/^buildswap(const unsigned char *p) {$/;"	f
buildword	byteswap.cpp	/^buildword(const unsigned char *p) {$/;"	f
byteswap	byteswap.cpp	/^byteswap(uint32_t v) {$/;"	f
byteswap	byteswap.h	69;"	d
byteswapbuf	byteswap.cpp	/^byteswapbuf(int ln, uint32_t *buf) {$/;"	f
byteswapbuf	byteswap.h	70;"	d
close	main_tb.cpp	/^	void	close(void) {$/;"	f	class:MAINTB
closetrace	testb.h	/^	virtual	void	closetrace(void) {$/;"	f	class:TESTB
cpu_alu_ce	main_tb.cpp	78;"	d	file:
cpu_break	main_tb.cpp	62;"	d	file:
cpu_bus_err	main_tb.cpp	71;"	d	file:
cpu_cmd_addr	main_tb.cpp	70;"	d	file:
cpu_cmd_halt	main_tb.cpp	63;"	d	file:
cpu_gie	main_tb.cpp	66;"	d	file:
cpu_ibus_err	main_tb.cpp	72;"	d	file:
cpu_iflags	main_tb.cpp	67;"	d	file:
cpu_ipc	main_tb.cpp	64;"	d	file:
cpu_mem_rdaddr	main_tb.cpp	74;"	d	file:
cpu_mem_wraddr	main_tb.cpp	75;"	d	file:
cpu_new_pc	main_tb.cpp	79;"	d	file:
cpu_op_sim	main_tb.cpp	76;"	d	file:
cpu_op_valid	main_tb.cpp	77;"	d	file:
cpu_regs	main_tb.cpp	69;"	d	file:
cpu_sim_immv	main_tb.cpp	80;"	d	file:
cpu_ubus_err	main_tb.cpp	73;"	d	file:
cpu_uflags	main_tb.cpp	68;"	d	file:
cpu_upc	main_tb.cpp	65;"	d	file:
debug	pportsim.h	/^	void	debug(const bool dbg) { m_debug = dbg; }$/;"	f	class:PPORTSIM
done	testb.h	/^	virtual bool	done(void) {$/;"	f	class:TESTB
dump	main_tb.cpp	/^	void dump(const uint32_t *regp) {$/;"	f	class:MAINTB
elfread	zipelf.cpp	/^void	elfread(const char *fname, unsigned &entry, ELFSECTION **&sections)$/;"	f
eval	testb.h	/^	virtual	void	eval(void) {$/;"	f	class:TESTB
execsim	main_tb.cpp	/^	void	execsim(const uint32_t imm) {$/;"	f	class:MAINTB
gie	main_tb.cpp	/^	bool	gie(void) {$/;"	f	class:MAINTB
iself	zipelf.cpp	/^iself(const char *fname)$/;"	f
kill	pportsim.cpp	/^void	PPORTSIM::kill(void) {$/;"	f	class:PPORTSIM
load	main_tb.cpp	/^	bool	load(uint32_t addr, const char *buf, uint32_t len) {$/;"	f	class:MAINTB
load	memsim.cpp	/^void	MEMSIM::load(const char *fname) {$/;"	f	class:MEMSIM
load	memsim.cpp	/^void	MEMSIM::load(const unsigned int addr, const char *buf, const size_t len) {$/;"	f	class:MEMSIM
loadelf	main_tb.cpp	/^	void	loadelf(const char *elfname) {$/;"	f	class:MAINTB
m_changed	testb.h	/^	bool		m_changed;$/;"	m	class:TESTB
m_clk	testb.h	/^	TBCLOCK	m_clk;$/;"	m	class:TESTB
m_cllen	pportsim.h	/^	int	m_ilen, m_rxpos, m_cmdpos, m_conpos, m_tx_busy, m_cllen,$/;"	m	class:PPORTSIM
m_cmd	pportsim.h	/^		m_cmd,	\/\/ Connection to the command port FD$/;"	m	class:PPORTSIM
m_cmdbuf	pportsim.h	/^		m_cmdbuf[PPORTSIMBUFLEN],$/;"	m	class:PPORTSIM
m_cmdline	pportsim.h	/^		m_cmdline[PPORTSIMBUFLEN],$/;"	m	class:PPORTSIM
m_cmdpos	pportsim.h	/^	int	m_ilen, m_rxpos, m_cmdpos, m_conpos, m_tx_busy, m_cllen,$/;"	m	class:PPORTSIM
m_con	pportsim.h	/^		m_con;	\/\/ Connection to the console port FD$/;"	m	class:PPORTSIM
m_conbuf	pportsim.h	/^	char	m_conbuf[PPORTSIMBUFLEN],$/;"	m	class:PPORTSIM
m_conpos	pportsim.h	/^	int	m_ilen, m_rxpos, m_cmdpos, m_conpos, m_tx_busy, m_cllen,$/;"	m	class:PPORTSIM
m_console	pportsim.h	/^		m_console, \/\/ Console port comes in\/out on this socket$/;"	m	class:PPORTSIM
m_copy	pportsim.h	/^	bool	m_copy;$/;"	m	class:PPORTSIM
m_core	testb.h	/^	VA	*m_core;$/;"	m	class:TESTB
m_cpu_bombed	main_tb.cpp	/^	int	m_cpu_bombed;$/;"	m	class:MAINTB	file:
m_data	zipelf.h	/^	char		m_data[4];$/;"	m	class:ELFSECTION
m_debug	pportsim.h	/^	bool	m_debug;$/;"	m	class:PPORTSIM
m_delay	memsim.h	/^	BUSW	*m_mem, m_len, m_mask, m_head, m_tail, m_delay_mask, m_delay;$/;"	m	class:MEMSIM
m_delay_mask	memsim.h	/^	BUSW	*m_mem, m_len, m_mask, m_head, m_tail, m_delay_mask, m_delay;$/;"	m	class:MEMSIM
m_done	testb.h	/^	bool		m_done;$/;"	m	class:TESTB
m_fifo_ack	memsim.h	/^	int	*m_fifo_ack;$/;"	m	class:MEMSIM
m_fifo_data	memsim.h	/^	BUSW	*m_fifo_data;$/;"	m	class:MEMSIM
m_hb	main_tb.cpp	/^	PPORTSIM	*m_hb;$/;"	m	class:MAINTB	file:
m_head	memsim.h	/^	BUSW	*m_mem, m_len, m_mask, m_head, m_tail, m_delay_mask, m_delay;$/;"	m	class:MEMSIM
m_ilen	pportsim.h	/^	int	m_ilen, m_rxpos, m_cmdpos, m_conpos, m_tx_busy, m_cllen,$/;"	m	class:PPORTSIM
m_intransit_data	pportsim.h	/^		m_intransit_data;$/;"	m	class:PPORTSIM
m_len	memsim.h	/^	BUSW	*m_mem, m_len, m_mask, m_head, m_tail, m_delay_mask, m_delay;$/;"	m	class:MEMSIM
m_len	zipelf.h	/^	uint32_t	m_start, m_len;$/;"	m	class:ELFSECTION
m_mask	memsim.h	/^	BUSW	*m_mem, m_len, m_mask, m_head, m_tail, m_delay_mask, m_delay;$/;"	m	class:MEMSIM
m_mem	memsim.h	/^	BUSW	*m_mem, m_len, m_mask, m_head, m_tail, m_delay_mask, m_delay;$/;"	m	class:MEMSIM
m_pp_phase	pportsim.h	/^		m_pp_phase;$/;"	m	class:PPORTSIM
m_rxbuf	pportsim.h	/^		m_rxbuf[PPORTSIMBUFLEN],$/;"	m	class:PPORTSIM
m_rxpos	pportsim.h	/^	int	m_ilen, m_rxpos, m_cmdpos, m_conpos, m_tx_busy, m_cllen,$/;"	m	class:PPORTSIM
m_skt	pportsim.h	/^	int	m_skt,	\/\/ Commands come in on this socket$/;"	m	class:PPORTSIM
m_start	zipelf.h	/^	uint32_t	m_start, m_len;$/;"	m	class:ELFSECTION
m_started_flag	pportsim.h	/^	bool	m_started_flag;$/;"	m	class:PPORTSIM
m_tail	memsim.h	/^	BUSW	*m_mem, m_len, m_mask, m_head, m_tail, m_delay_mask, m_delay;$/;"	m	class:MEMSIM
m_time_ps	testb.h	/^	unsigned long	m_time_ps;$/;"	m	class:TESTB
m_trace	testb.h	/^	VerilatedVcdC*	m_trace;$/;"	m	class:TESTB
m_tx_busy	pportsim.h	/^	int	m_ilen, m_rxpos, m_cmdpos, m_conpos, m_tx_busy, m_cllen,$/;"	m	class:PPORTSIM
main	automaster_tb.cpp	/^int	main(int argc, char **argv) {$/;"	f
next	pportsim.cpp	/^int	PPORTSIM::next(void) {$/;"	f	class:PPORTSIM
opentrace	testb.h	/^	virtual	void	opentrace(const char *vcdname) {$/;"	f	class:TESTB
operator ()	memsim.h	/^	void	operator()(const uchar wb_cyc, const uchar wb_stb,$/;"	f	class:MEMSIM
operator ()	pportsim.cpp	/^int	PPORTSIM::operator()(int &pp_clk, int &pp_dir, int pp_data, int pp_clkfb) {$/;"	f	class:PPORTSIM
operator []	memsim.h	/^	BUSW &operator[](const BUSW addr) { return m_mem[addr&m_mask]; }$/;"	f	class:MEMSIM
poll_accept	pportsim.cpp	/^void	PPORTSIM::poll_accept(void) {$/;"	f	class:PPORTSIM
poll_read	pportsim.cpp	/^void	PPORTSIM::poll_read(void) {$/;"	f	class:PPORTSIM
received	pportsim.cpp	/^void	PPORTSIM::received(const char ch) {$/;"	f	class:PPORTSIM
reset	main_tb.cpp	/^	void	reset(void) {$/;"	f	class:MAINTB
reset	testb.h	/^	virtual	void	reset(void) {$/;"	f	class:TESTB
setup_listener	pportsim.cpp	/^int	PPORTSIM::setup_listener(const int port) {$/;"	f	class:PPORTSIM
sim_clk_tick	testb.h	/^	virtual	void	sim_clk_tick(void) {$/;"	f	class:TESTB
tick	main_tb.cpp	/^	void	tick(void) {$/;"	f	class:MAINTB
tick	testb.h	/^	virtual	void	tick(void) {$/;"	f	class:TESTB
trace	main_tb.cpp	/^	void	trace(const char *vcd_trace_file_name) {$/;"	f	class:MAINTB
trace	testb.h	/^	void	trace(const char *vcdname) {$/;"	f	class:TESTB
uchar	memsim.h	/^	typedef	unsigned char	uchar;$/;"	t	class:MEMSIM
usage	automaster_tb.cpp	/^void	usage(void) {$/;"	f
~MEMSIM	memsim.cpp	/^MEMSIM::~MEMSIM(void) {$/;"	f	class:MEMSIM
~TESTB	testb.h	/^	virtual ~TESTB(void) {$/;"	f	class:TESTB
