diff --git a/auto-data/Makefile b/auto-data/Makefile
index aeba5ad..95bcd1b 100644
--- a/auto-data/Makefile
+++ b/auto-data/Makefile
@@ -51,7 +51,7 @@ DATA := global.txt bkram.txt buserr.txt clock.txt			\
 	hbconsole.txt gpio.txt zipbones.txt
 	# Not used: flash.txt rtclite.txt
 
-AUTOFPGA := ../../../autofpga/trunk/sw/autofpga
+AUTOFPGA := ../../autofpga/sw/autofpga
 
 .PHONY: data
 data: $(AUTOFPGA) $(DATA)
@@ -59,8 +59,8 @@ data: $(AUTOFPGA) $(DATA)
 
 .PHONY: install
 install: data
-	$(call notify-on-change,toplevel.v,../rtl/icozip)
-	$(call notify-on-change,main.v,../rtl/icozip)
+	$(call notify-on-change,toplevel.v,../rtl/catzip)
+	$(call notify-on-change,main.v,../rtl/catzip)
 	$(call notify-on-change,regdefs.h,../sw/host/)
 	$(call notify-on-change,regdefs.cpp,../sw/host/)
 	$(call notify-on-change,board.h,../sw/board/)
diff --git a/auto-data/clock.txt b/auto-data/clock.txt
index ea82d0a..2d4e5ac 100644
--- a/auto-data/clock.txt
+++ b/auto-data/clock.txt
@@ -47,7 +47,7 @@
 	assign	s_clk = i_clk;
 `else
 	wire	clk_40mhz, pll_locked;
-	SB_PLL40_PAD #(
+	SB_PLL40_CORE #(
 		.FEEDBACK_PATH("SIMPLE"),
 		.DELAY_ADJUSTMENT_MODE_FEEDBACK("FIXED"),
 		.DELAY_ADJUSTMENT_MODE_RELATIVE("FIXED"),
@@ -59,7 +59,7 @@
 		.DIVF(7'd31),		// Multiply by (DIVF+1)= 1
 		.FILTER_RANGE(3'b010)
 	) plli (
-		.PACKAGEPIN     (i_clk        ),
+		.REFERENCECLK     (i_clk        ),
 		.PLLOUTCORE     (clk_40mhz    ),
 		.LOCK           (pll_locked  ),
 		.BYPASS         (1'b0         ),
diff --git a/rtl/catzip/auto.mk b/rtl/catzip/auto.mk
index 2e813c9..e9ec60d 100644
--- a/rtl/catzip/auto.mk
+++ b/rtl/catzip/auto.mk
@@ -8,7 +8,7 @@
 ## Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
 ## DO NOT EDIT THIS FILE!
 ##
-## CmdLine:	../../../autofpga/trunk/sw/autofpga ../../../autofpga/trunk/sw/autofpga -o . global.txt bkram.txt buserr.txt clock.txt dlyarbiter.txt pic.txt pwrcount.txt version.txt hbconsole.txt gpio.txt zipbones.txt
+## CmdLine:	../../autofpga/sw/autofpga ../../autofpga/sw/autofpga -o . global.txt bkram.txt buserr.txt clock.txt dlyarbiter.txt pic.txt pwrcount.txt version.txt hbconsole.txt gpio.txt zipbones.txt
 ##
 ## Creator:	Dan Gisselquist, Ph.D.
 ##		Gisselquist Technology, LLC
@@ -41,17 +41,17 @@
 ##
 ZIPCPUD := cpu
 ZIPCPU  := $(addprefix $(ZIPCPUD)/,zipcpu.v cpuops.v dblfetch.v memops.v idecode.v wbpriarbiter.v zipbones.v icontrol.v wbwatchdog.v busdelay.v cpudefs.v wbdblpriarb.v)
-PICD := cpu
-PIC  := $(addprefix $(PICD)/,icontrol.v)
 GPIO := wbgpio.v
 
+PPORTD := ../pport
+PPORT  := $(addprefix $(PPORTD)/,ppio.v pport.v ufifo.v)
+BUSDLYD := cpu
+BUSDLY  := $(addprefix $(BUSDLYD)/,busdelay.v wbpriarbiter.v)
 BKRAM := memdev.v
 
+PICD := cpu
+PIC  := $(addprefix $(PICD)/,icontrol.v)
 HBBUSD := ../hexbus
 HBBUS  := $(addprefix $(HBBUSD)/,hbconsole.v hbdechex.v hbdeword.v hbexec.v hbgenhex.v hbidle.v hbints.v hbnewline.v hbpack.v console.v)
-BUSDLYD := cpu
-BUSDLY  := $(addprefix $(BUSDLYD)/,busdelay.v wbpriarbiter.v)
-PPORTD := ../pport
-PPORT  := $(addprefix $(PPORTD)/,ppio.v pport.v ufifo.v)
-VFLIST := main.v  $(ZIPCPU) $(PIC) $(GPIO) $(BKRAM) $(HBBUS) $(BUSDLY) $(PPORT)
-AUTOVDIRS :=  -y cpu -y cpu -y ../hexbus -y cpu -y ../pport
+VFLIST := main.v  $(ZIPCPU) $(GPIO) $(PPORT) $(BUSDLY) $(BKRAM) $(PIC) $(HBBUS)
+AUTOVDIRS :=  -y cpu -y ../pport -y cpu -y cpu -y ../hexbus
diff --git a/sim/verilated/Makefile b/sim/verilated/Makefile
index 3a72d16..5460643 100644
--- a/sim/verilated/Makefile
+++ b/sim/verilated/Makefile
@@ -48,7 +48,7 @@ hostcheck:
 
 CXX	:= $(CROSS)g++
 OBJDIR  := obj-$(ARCH)
-RTLD	:= ../../rtl/icozip
+RTLD	:= ../../rtl/catzip
 VERILATOR_ROOT ?= $(shell bash -c 'verilator -V|grep VERILATOR_ROOT | head -1 | sed -e " s/^.*=\s*//"')
 VROOT   := $(VERILATOR_ROOT)
 VINCD   := $(VROOT)/include
diff --git a/sim/verilated/main_tb.cpp b/sim/verilated/main_tb.cpp
index cf93b1b..ffd0b37 100644
--- a/sim/verilated/main_tb.cpp
+++ b/sim/verilated/main_tb.cpp
@@ -8,7 +8,7 @@
 // Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
 // DO NOT EDIT THIS FILE!
 //
-// CmdLine:	../../../autofpga/trunk/sw/autofpga ../../../autofpga/trunk/sw/autofpga -o . global.txt bkram.txt buserr.txt clock.txt dlyarbiter.txt pic.txt pwrcount.txt version.txt hbconsole.txt gpio.txt zipbones.txt
+// CmdLine:	../../autofpga/sw/autofpga ../../autofpga/sw/autofpga -o . global.txt bkram.txt buserr.txt clock.txt dlyarbiter.txt pic.txt pwrcount.txt version.txt hbconsole.txt gpio.txt zipbones.txt
 //
 // Creator:	Dan Gisselquist, Ph.D.
 //		Gisselquist Technology, LLC
@@ -42,6 +42,10 @@
 //
 // SIM.INCLUDE
 //
+// Any SIM.INCLUDE tags you define will be pasted here.
+// This is useful for guaranteeing any include functions
+// your simulation needs are called.
+//
 // Looking for string: SIM.INCLUDE
 #include "verilated.h"
 #include "Vmain.h"
@@ -50,14 +54,17 @@
 #include "design.h"
 #include "regdefs.h"
 #include "testb.h"
-#include "port.h"
-#include "pportsim.h"
 #include "zipelf.h"
 
+#include "port.h"
+#include "pportsim.h"
 #include "byteswap.h"
 //
 // SIM.DEFINES
 //
+// This tag is useful fr pasting in any #define values that
+// might then control the simulation following.
+//
 // Looking for string: SIM.DEFINES
 #define	cpu_break 	v__DOT__swic__DOT__cpu_break
 #define	cpu_cmd_halt	v__DOT__swic__DOT__cmd_halt
@@ -83,21 +90,41 @@
 class	MAINTB : public TESTB<Vmain> {
 public:
 		// SIM.DEFNS
+		//
+		// If you have any simulation components, create a
+		// SIM.DEFNS tag to have those components defined here
+		// as part of the main_tb.cpp function.
 // Looking for string: SIM.DEFNS
-	PPORTSIM	*m_hb;
 	int	m_cpu_bombed;
+	PPORTSIM	*m_hb;
 	MAINTB(void) {
-		// From hb
-		m_hb = new PPORTSIM(FPGAPORT, true);
+		// SIM.INIT
+		//
+		// If your simulation components need to be initialized,
+		// create a SIM.INIT tag.  That tag's value will be pasted
+		// here.
+		//
 		// From zip
 		m_cpu_bombed = 0;
+		// From hb
+		m_hb = new PPORTSIM(FPGAPORT, true);
 	}
 
 	void	reset(void) {
+		// SIM.SETRESET
+		// If your simulation component needs logic before the
+		// tick with reset set, that logic can be placed into
+		// the SIM.SETRESET tag and thus pasted here.
+		//
 // Looking for string: SIM.SETRESET
 		m_core->i_gpio |= 1;
 		m_core->i_clk = 1;
 		m_core->eval();
+		// SIM.CLRRESET
+		// If your simulation component needs logic following the
+		// reset tick, that logic can be placed into the
+		// SIM.CLRRESET tag and thus pasted here.
+		//
 // Looking for string: SIM.CLRRESET
 		m_core->i_gpio &= ~1;
 	}
@@ -118,13 +145,6 @@ public:
 			return;
 		// KYSIM.TICK tags
 // Looking for string: SIM.TICK
-		int	pp_clk = m_core->i_pp_clk,
-			pp_dir = m_core->i_pp_dir;
-		m_core->i_pp_data = (*m_hb)(
-			pp_clk, pp_dir, m_core->o_pp_data,
-			m_core->o_pp_clkfb);
-		m_core->i_pp_clk = pp_clk;
-		m_core->i_pp_dir = pp_dir;
 #ifdef	INCLUDE_ZIPCPU
 		// ZipCPU Sim instruction support
 		if ((m_core->cpu_op_sim)
@@ -145,22 +165,49 @@ public:
 		}
 #endif	// INCLUDE_ZIPCPU
 
+		int	pp_clk = m_core->i_pp_clk,
+			pp_dir = m_core->i_pp_dir;
+		m_core->i_pp_data = (*m_hb)(
+			pp_clk, pp_dir, m_core->o_pp_data,
+			m_core->o_pp_clkfb);
+		m_core->i_pp_clk = pp_clk;
+		m_core->i_pp_dir = pp_dir;
 		TESTB<Vmain>::tick();
 
 		bool	writeout = false;
 
 			// KYSIM.DBGCONDITION tags
+			//
+			// SIM.DBGCONDITION
+			// Set writeout to true here for debug by printf access
+			// to this routine
+			//
 // Looking for string: SIM.DBGCONDITION
 
 			if (writeout) {
-					// KYSIM.DEBUG tags
+				// SIM.DEBUG tags can print here, supporting
+				// any attempts to debug by printf.  Following any
+				// code you place here, a newline will close the
+				// debug section.
+		//
 // Looking for string: SIM.DEBUG
 		}
 	}
 
+	//
+	// The load function
+	//
+	// This function is required by designs that need the flash or memory
+	// set prior to run time.  The test harness should be able to call
+	// this function to load values into any (memory-type) location
+	// on the bus.
+	//
 	bool	load(uint32_t addr, const char *buf, uint32_t len) {
 		uint32_t	start, offset, wlen, base, naddr;
 
+		//
+		// Loading the bkram component
+		//
 		base  = 0x00002000;
 		naddr = 0x00000800;
 
@@ -189,6 +236,10 @@ public:
 #else	// BKRAM_ACCESS
 			return false;
 #endif	// BKRAM_ACCESS
+		//
+		// End of components with a SIM.LOAD tag, and a
+		// non-zero number of addresses (NADDR)
+		//
 		}
 
 		return false;
@@ -197,6 +248,10 @@ public:
 	//
 	// KYSIM.METHODS
 	//
+	// If your simulation code will need to call any of its own function
+	// define this tag by those functions (or other sim code), and
+	// it will be pasated here.
+	//
 // Looking for string: SIM.METHODS
 
 	void	loadelf(const char *elfname) {
diff --git a/sim/verilated/testb.h b/sim/verilated/testb.h
index 295e0da..69cd150 100644
--- a/sim/verilated/testb.h
+++ b/sim/verilated/testb.h
@@ -8,7 +8,7 @@
 // Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
 // DO NOT EDIT THIS FILE!
 //
-// CmdLine:	../../../autofpga/trunk/sw/autofpga ../../../autofpga/trunk/sw/autofpga -o . global.txt bkram.txt buserr.txt clock.txt dlyarbiter.txt pic.txt pwrcount.txt version.txt hbconsole.txt gpio.txt zipbones.txt
+// CmdLine:	../../autofpga/sw/autofpga ../../autofpga/sw/autofpga -o . global.txt bkram.txt buserr.txt clock.txt dlyarbiter.txt pic.txt pwrcount.txt version.txt hbconsole.txt gpio.txt zipbones.txt
 //
 // Creator:	Dan Gisselquist, Ph.D.
 //		Gisselquist Technology, LLC
@@ -62,7 +62,7 @@ public:
 		m_trace    = NULL;
 		m_done     = false;
 		Verilated::traceEverOn(true);
-		m_clk.init(25000);	//   40.00 MHz
+		m_clk.init(89);	//11235.96 MHz
 	}
 	virtual ~TESTB(void) {
 		if (m_trace) m_trace->close();
@@ -95,7 +95,7 @@ public:
 	}
 
 	virtual	void	tick(void) {
-		m_time_ps+= 25000;
+		m_time_ps+= 89;
 
 		// Make sure we have all of our evaluations complete before the top
 		// of the clock.  This is necessary since some of the 
@@ -106,7 +106,7 @@ public:
 		sim_clk_tick();
 		if (m_changed) {
 			eval();
-			if (m_trace) m_trace->dump(m_time_ps - 6250);
+			if (m_trace) m_trace->dump(m_time_ps - 22);
 		}
 
 		m_core->i_clk = 1;
@@ -115,7 +115,7 @@ public:
 		m_core->i_clk = 0;
 		eval();
 		if (m_trace) {
-			m_trace->dump(m_time_ps + 12500);
+			m_trace->dump(m_time_ps + 44);
 			m_trace->flush();
 		}
 	}
